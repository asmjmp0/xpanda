/*
* class name:L_GLOBAL;
* Source code recreated from a .abc file.
* powered by xpanda decompiler, author: jmp0
*/
let v0, v1, v2, v3, v4, acc;
acc = undefined;
globalThis["plainText"] = acc;
acc = undefined;
globalThis["cipherText"] = acc;
acc = undefined;
globalThis["bSide"] = acc;
acc = undefined;
globalThis["aSide"] = acc;
acc = undefined;
globalThis["AES"] = acc;
acc = {
  "cipher": false,
  "generateKey": false,
  "keyExpansion": false,
  "rcon": false,
  "shiftRows": false,
  "mixColumns": false,
  "VERSION": "1.2",
  "addRoundKey": false,
  "subWord": false,
  "sbox": false,
  "rotWord": false,
  "subBytes": false
};
v0 = acc;
acc = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22];
v0["sbox"] = acc;
acc = [];
v1 = acc;
acc = [0, 0, 0, 0];
v1[0] = acc;
acc = [1, 0, 0, 0];
v1[1] = acc;
acc = [2, 0, 0, 0];
v1[2] = acc;
acc = [4, 0, 0, 0];
v1[3] = acc;
acc = [8, 0, 0, 0];
v1[4] = acc;
acc = [16, 0, 0, 0];
v1[5] = acc;
acc = [32, 0, 0, 0];
v1[6] = acc;
acc = [64, 0, 0, 0];
v1[7] = acc;
acc = [128, 0, 0, 0];
v1[8] = acc;
acc = [27, 0, 0, 0];
v1[9] = acc;
acc = [54, 0, 0, 0];
v1[10] = acc;
acc = v1;
v0["rcon"] = acc;
acc = function cipher(p0, p1) {
  let v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, acc;
  acc = 0;
  v0 = acc;
  acc = 1;
  v1 = acc;
  acc = 4;
  v2 = acc;
  acc = undefined;
  acc = p1;
  acc = acc["length"];
  v3 = acc;
  acc = v2;
  acc = v3 / acc;
  v3 = acc;
  acc = v1;
  acc = v3 - acc;
  v3 = acc;
  acc = [];
  v4 = acc;
  acc = Array;
  v5 = acc;
  v11 = v5;
  v12 = v2;
  acc = new v11(v12);
  v4[0] = acc;
  acc = Array;
  v5 = acc;
  v11 = v5;
  v12 = v2;
  acc = new v11(v12);
  v4[1] = acc;
  acc = Array;
  v5 = acc;
  v11 = v5;
  v12 = v2;
  acc = new v11(v12);
  v4[2] = acc;
  acc = Array;
  v5 = acc;
  v11 = v5;
  v12 = v2;
  acc = new v11(v12);
  v4[3] = acc;
  acc = Array;
  v5 = acc;
  acc = v2;
  acc = v2 * acc;
  v6 = acc;
  v11 = v5;
  v12 = v6;
  acc = new v11(v12);
  v5 = acc;
  v6 = v0;
  while (true) {
    acc = p0;
    acc = acc["length"];
    acc = v6 < acc;
    if (!acc) break;
    acc = v2;
    acc = v6 % acc;
    acc = v4[acc];
    v7 = acc;
    acc = Math;
    v8 = acc;
    acc = acc["floor"];
    v9 = acc;
    acc = v2;
    acc = v6 / acc;
    v10 = acc;
    acc = v9;
    acc = acc.call(v8, v10);
    v8 = acc;
    acc = v6;
    acc = p0[acc];
    v7[v8] = acc;
    acc = v6;
    acc = ++acc;
    v6 = acc;
  }
  acc = this;
  acc = acc["addRoundKey"];
  v11 = this;
  v12 = v4;
  v13 = p1;
  v14 = v0;
  v15 = v2;
  acc = acc.call(v11, v12, v13, v14, v15);
  while (true) {
    acc = v3;
    acc = v1 < acc;
    if (!acc) break;
    acc = this;
    acc = acc["subBytes"];
    acc = acc.call(this, v4, v2);
    acc = this;
    acc = acc["shiftRows"];
    acc = acc.call(this, v4, v2);
    acc = this;
    acc = acc["mixColumns"];
    acc = acc.call(this, v4, v2);
    acc = this;
    acc = acc["addRoundKey"];
    v11 = this;
    v12 = v4;
    v13 = p1;
    v14 = v1;
    v15 = v2;
    acc = acc.call(v11, v12, v13, v14, v15);
    acc = v1;
    acc = ++acc;
    v1 = acc;
  }
  acc = this;
  acc = acc["subBytes"];
  acc = acc.call(this, v4, v2);
  acc = this;
  acc = acc["shiftRows"];
  acc = acc.call(this, v4, v2);
  acc = this;
  acc = acc["addRoundKey"];
  v11 = this;
  v12 = v4;
  v13 = p1;
  v14 = v1;
  v15 = v2;
  acc = acc.call(v11, v12, v13, v14, v15);
  while (true) {
    acc = v5;
    acc = acc["length"];
    acc = v0 < acc;
    if (!acc) break;
    acc = v2;
    acc = v0 % acc;
    acc = v4[acc];
    v1 = acc;
    acc = Math;
    v3 = acc;
    acc = acc["floor"];
    v6 = acc;
    acc = v2;
    acc = v0 / acc;
    v7 = acc;
    acc = v6;
    acc = acc.call(v3, v7);
    acc = v1[acc];
    v5[v0] = acc;
    acc = v0;
    acc = ++acc;
    v0 = acc;
  }
  acc = v5;
  return acc;
};
v0["cipher"] = acc;
acc = function subBytes(p0, p1) {
  let v0, v1, v2, v3, v4, v5, v6, acc;
  acc = 4;
  v0 = acc;
  acc = 0;
  v1 = acc;
  acc = undefined;
  v2 = v1;
  while (true) {
    acc = p1;
    acc = v2 < acc;
    if (!acc) break;
    v3 = v1;
    while (true) {
      acc = v0;
      acc = v3 < acc;
      if (!acc) break;
      acc = v3;
      acc = p0[acc];
      v4 = acc;
      acc = this;
      acc = acc["sbox"];
      v5 = acc;
      acc = v3;
      acc = p0[acc];
      v6 = acc;
      acc = v2;
      acc = v6[acc];
      acc = v5[acc];
      v4[v2] = acc;
      acc = v3;
      acc = ++acc;
      v3 = acc;
    }
    acc = v2;
    acc = ++acc;
    v2 = acc;
  }
  acc = undefined;
  return;
};
v0["subBytes"] = acc;
acc = function shiftRows(p0, p1) {
  let v0, v1, v2, v3, v4, v5, v6, v7, v8, acc;
  acc = 0;
  v0 = acc;
  acc = 4;
  v1 = acc;
  acc = 1;
  v2 = acc;
  acc = undefined;
  acc = Array;
  v3 = acc;
  v7 = v3;
  v8 = p1;
  acc = new v7(v8);
  v3 = acc;
  while (true) {
    acc = v1;
    acc = v2 < acc;
    if (!acc) break;
    v4 = v0;
    while (true) {
      acc = p1;
      acc = v4 < acc;
      if (!acc) break;
      acc = v2;
      acc = p0[acc];
      v5 = acc;
      acc = v2;
      acc = v4 + acc;
      v6 = acc;
      acc = p1;
      acc = v6 % acc;
      acc = v5[acc];
      v3[v4] = acc;
      acc = v4;
      acc = ++acc;
      v4 = acc;
    }
    v4 = v0;
    while (true) {
      acc = v1;
      acc = v4 < acc;
      if (!acc) break;
      acc = v2;
      acc = p0[acc];
      v5 = acc;
      acc = v4;
      acc = v3[acc];
      v5[v4] = acc;
      acc = v4;
      acc = ++acc;
      v4 = acc;
    }
    acc = v2;
    acc = ++acc;
    v2 = acc;
  }
  acc = undefined;
  return;
};
v0["shiftRows"] = acc;
acc = function mixColumns(p0, p1) {
  let v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, acc;
  acc = 2;
  v0 = acc;
  acc = 3;
  v1 = acc;
  acc = 283;
  v2 = acc;
  acc = 1;
  v3 = acc;
  acc = 128;
  v4 = acc;
  acc = 4;
  v5 = acc;
  acc = 0;
  v6 = acc;
  acc = undefined;
  v7 = v6;
  while (true) {
    acc = p1;
    acc = v7 < acc;
    if (!acc) break;
    acc = Array;
    v8 = acc;
    v12 = v8;
    v13 = v5;
    acc = new v12(v13);
    v8 = acc;
    acc = Array;
    v9 = acc;
    v12 = v9;
    v13 = v5;
    acc = new v12(v13);
    v9 = acc;
    v10 = v6;
    while (true) {
      acc = v5;
      acc = v10 < acc;
      if (!acc) break;
      acc = v10;
      acc = p0[acc];
      v11 = acc;
      acc = v7;
      acc = v11[acc];
      v8[v10] = acc;
      acc = v10;
      acc = p0[acc];
      v11 = acc;
      acc = v7;
      acc = v11[acc];
      v11 = acc;
      acc = v4;
      acc = v11 & acc;
      acc = !acc;
      if (!acc) {
        acc = v10;
        acc = p0[acc];
        v11 = acc;
        acc = v7;
        acc = v11[acc];
        v11 = acc;
        acc = v3;
        acc = v11 << acc;
        v11 = acc;
        acc = v2;
        acc = v11 ^ acc;
      } else {
        acc = v10;
        acc = p0[acc];
        v11 = acc;
        acc = v7;
        acc = v11[acc];
        v11 = acc;
        acc = v3;
        acc = v11 << acc;
      }
      v9[v10] = acc;
      acc = v10;
      acc = ++acc;
      v10 = acc;
    }
    acc = v6;
    acc = p0[acc];
    v10 = acc;
    acc = v6;
    acc = v9[acc];
    v11 = acc;
    acc = v1;
    acc = v8[acc];
    acc = v11 ^ acc;
    v11 = acc;
    acc = v0;
    acc = v8[acc];
    acc = v11 ^ acc;
    v11 = acc;
    acc = v3;
    acc = v9[acc];
    acc = v11 ^ acc;
    v11 = acc;
    acc = v3;
    acc = v8[acc];
    acc = v11 ^ acc;
    v10[v7] = acc;
    acc = v3;
    acc = p0[acc];
    v10 = acc;
    acc = v3;
    acc = v9[acc];
    v11 = acc;
    acc = v6;
    acc = v8[acc];
    acc = v11 ^ acc;
    v11 = acc;
    acc = v1;
    acc = v8[acc];
    acc = v11 ^ acc;
    v11 = acc;
    acc = v0;
    acc = v9[acc];
    acc = v11 ^ acc;
    v11 = acc;
    acc = v0;
    acc = v8[acc];
    acc = v11 ^ acc;
    v10[v7] = acc;
    acc = v0;
    acc = p0[acc];
    v10 = acc;
    acc = v0;
    acc = v9[acc];
    v11 = acc;
    acc = v3;
    acc = v8[acc];
    acc = v11 ^ acc;
    v11 = acc;
    acc = v6;
    acc = v8[acc];
    acc = v11 ^ acc;
    v11 = acc;
    acc = v1;
    acc = v9[acc];
    acc = v11 ^ acc;
    v11 = acc;
    acc = v1;
    acc = v8[acc];
    acc = v11 ^ acc;
    v10[v7] = acc;
    acc = v1;
    acc = p0[acc];
    v10 = acc;
    acc = v1;
    acc = v9[acc];
    v11 = acc;
    acc = v0;
    acc = v8[acc];
    acc = v11 ^ acc;
    v11 = acc;
    acc = v3;
    acc = v8[acc];
    acc = v11 ^ acc;
    v11 = acc;
    acc = v6;
    acc = v9[acc];
    acc = v11 ^ acc;
    v9 = acc;
    acc = v6;
    acc = v8[acc];
    acc = v9 ^ acc;
    v10[v7] = acc;
    acc = v7;
    acc = ++acc;
    v7 = acc;
  }
  acc = undefined;
  return;
};
v0["mixColumns"] = acc;
acc = function addRoundKey(p0, p1, p2, p3) {
  let v0, v1, v2, v3, v4, v5, v6, acc;
  acc = 4;
  v0 = acc;
  acc = 0;
  v1 = acc;
  acc = undefined;
  v2 = v1;
  while (true) {
    acc = p3;
    acc = v2 < acc;
    if (!acc) break;
    v3 = v1;
    while (true) {
      acc = v0;
      acc = v3 < acc;
      if (!acc) break;
      acc = v3;
      acc = p0[acc];
      v4 = acc;
      acc = v2;
      acc = v4[acc];
      v5 = acc;
      acc = v0;
      acc = p2 * acc;
      v6 = acc;
      acc = v2;
      acc = v6 + acc;
      acc = p1[acc];
      v6 = acc;
      acc = v3;
      acc = v6[acc];
      acc = v5 ^ acc;
      v4[v2] = acc;
      acc = v3;
      acc = ++acc;
      v3 = acc;
    }
    acc = v2;
    acc = ++acc;
    v2 = acc;
  }
  acc = undefined;
  return;
};
v0["addRoundKey"] = acc;
acc = function keyExpansion(p0) {
  let v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, acc;
  acc = 3;
  v0 = acc;
  acc = 2;
  v1 = acc;
  acc = 0;
  v2 = acc;
  acc = 1;
  v3 = acc;
  acc = 6;
  v4 = acc;
  acc = 4;
  v5 = acc;
  acc = undefined;
  acc = p0;
  acc = acc["length"];
  v6 = acc;
  acc = v5;
  acc = v6 / acc;
  v6 = acc;
  acc = v4;
  acc = v6 + acc;
  v7 = acc;
  acc = Array;
  v8 = acc;
  acc = v3;
  acc = v7 + acc;
  acc = v5 * acc;
  v7 = acc;
  v12 = v8;
  v13 = v7;
  acc = new v12(v13);
  v7 = acc;
  acc = Array;
  v8 = acc;
  v12 = v8;
  v13 = v5;
  acc = new v12(v13);
  v8 = acc;
  v9 = v2;
  while (true) {
    acc = v6;
    acc = v9 < acc;
    if (!acc) break;
    acc = [];
    v10 = acc;
    acc = v9;
    acc = v5 * acc;
    acc = p0[acc];
    v10[0] = acc;
    acc = v9;
    acc = v5 * acc;
    v11 = acc;
    acc = v3;
    acc = v11 + acc;
    acc = p0[acc];
    v10[1] = acc;
    acc = v9;
    acc = v5 * acc;
    v11 = acc;
    acc = v1;
    acc = v11 + acc;
    acc = p0[acc];
    v10[2] = acc;
    acc = v9;
    acc = v5 * acc;
    v11 = acc;
    acc = v0;
    acc = v11 + acc;
    acc = p0[acc];
    v10[3] = acc;
    acc = v10;
    v7[v9] = acc;
    acc = v9;
    acc = ++acc;
    v9 = acc;
  }
  v0 = v6;
  while (true) {
    acc = v7;
    acc = acc["length"];
    acc = v0 < acc;
    if (!acc) break;
    acc = Array;
    v1 = acc;
    v12 = v1;
    v13 = v5;
    acc = new v12(v13);
    v7[v0] = acc;
    v1 = v2;
    while (true) {
      acc = v5;
      acc = v1 < acc;
      if (!acc) break;
      acc = v3;
      acc = v0 - acc;
      acc = v7[acc];
      v9 = acc;
      acc = v1;
      acc = v9[acc];
      v8[v1] = acc;
      acc = v1;
      acc = ++acc;
      v1 = acc;
    }
    acc = v6;
    acc = v0 % acc;
    v1 = acc;
    acc = v2;
    acc = v1 === acc;
    if (acc) {
      acc = this;
      acc = acc["rotWord"];
      acc = acc.call(this, v8);
      acc = this;
      acc = acc["subWord"];
      acc = acc.call(this, v8);
      v1 = v2;
      while (true) {
        acc = v5;
        acc = v1 < acc;
        if (!acc) break;
        acc = v1;
        acc = v8[acc];
        v9 = acc;
        acc = globalThis["AES"];
        acc = acc["rcon"];
        v10 = acc;
        acc = v6;
        acc = v0 / acc;
        acc = v10[acc];
        v10 = acc;
        acc = v1;
        acc = v10[acc];
        acc = v9 ^ acc;
        v8[v1] = acc;
        acc = v1;
        acc = ++acc;
        v1 = acc;
      }
    } else {
      if ((acc = v4, acc = v6 > acc, acc = !acc, !acc) && (acc = v6, acc = v0 % acc, v1 = acc, acc = v5, acc = v1 === acc, acc = !acc, !acc)) {
        acc = this;
        acc = acc["subWord"];
        acc = acc.call(this, v8);
      }
    }
    v1 = v2;
    while (true) {
      acc = v5;
      acc = v1 < acc;
      if (!acc) break;
      acc = v0;
      acc = v7[acc];
      v9 = acc;
      acc = v6;
      acc = v0 - acc;
      acc = v7[acc];
      v10 = acc;
      acc = v1;
      acc = v10[acc];
      v10 = acc;
      acc = v1;
      acc = v8[acc];
      acc = v10 ^ acc;
      v9[v1] = acc;
      acc = v1;
      acc = ++acc;
      v1 = acc;
    }
    acc = v0;
    acc = ++acc;
    v0 = acc;
  }
  acc = v7;
  return acc;
};
v0["keyExpansion"] = acc;
acc = function rotWord(p0) {
  let v0, v1, v2, v3, acc;
  acc = 1;
  v0 = acc;
  acc = 3;
  v1 = acc;
  acc = 0;
  v2 = acc;
  acc = undefined;
  acc = v2;
  acc = p0[acc];
  v3 = acc;
  while (true) {
    acc = v1;
    acc = v2 < acc;
    if (!acc) break;
    acc = v0;
    acc = v2 + acc;
    acc = p0[acc];
    p0[v2] = acc;
    acc = v2;
    acc = ++acc;
    v2 = acc;
  }
  acc = v3;
  p0[v1] = acc;
  acc = undefined;
  return;
};
v0["rotWord"] = acc;
acc = function subWord(p0) {
  let v0, v1, v2, acc;
  acc = 4;
  v0 = acc;
  acc = 0;
  v1 = acc;
  acc = undefined;
  while (true) {
    acc = v0;
    acc = v1 < acc;
    if (!acc) break;
    acc = this;
    acc = acc["sbox"];
    v2 = acc;
    acc = v1;
    acc = p0[acc];
    acc = v2[acc];
    p0[v1] = acc;
    acc = v1;
    acc = ++acc;
    v1 = acc;
  }
  acc = undefined;
  return;
};
v0["subWord"] = acc;
acc = function generateKey() {
  let v0, v1, v2, v3, v4, v5, v6, v7, v8, acc;
  acc = 256;
  v0 = acc;
  acc = 0;
  v1 = acc;
  acc = 16;
  v2 = acc;
  acc = undefined;
  acc = Array;
  v3 = acc;
  v7 = v3;
  v8 = v2;
  acc = new v7(v8);
  v3 = acc;
  while (true) {
    acc = v2;
    acc = v1 < acc;
    if (!acc) break;
    acc = Math;
    v4 = acc;
    acc = acc["floor"];
    v5 = acc;
    acc = Math;
    v6 = acc;
    acc = acc["random"];
    acc = acc.call(v6);
    v6 = acc;
    acc = v0;
    acc = v6 * acc;
    v6 = acc;
    acc = v5;
    acc = acc.call(v4, v6);
    v3[v1] = acc;
    acc = v1;
    acc = ++acc;
    v1 = acc;
  }
  acc = v3;
  return acc;
};
v0["generateKey"] = acc;
acc = v0;
globalThis["AES"] = acc;
acc = globalThis["AES"];
v0 = acc;
acc = {
  "encode": false,
  "characters": "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
  "decode": false
};
v1 = acc;
acc = function encode(p0) {
  let v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, acc;
  acc = 64;
  v0 = acc;
  acc = 63;
  v1 = acc;
  acc = 6;
  v2 = acc;
  acc = 15;
  v3 = acc;
  acc = 4;
  v4 = acc;
  acc = 3;
  v5 = acc;
  acc = 2;
  v6 = acc;
  acc = 0;
  v7 = acc;
  acc = undefined;
  acc = "";
  v8 = acc;
  while (true) {
    acc = p0;
    acc = acc["length"];
    acc = v7 < acc;
    if (!acc) break;
    acc = p0;
    acc = acc["charCodeAt"];
    v9 = acc;
    acc = v7;
    v7 = acc;
    acc = ++acc;
    v10 = acc;
    acc = v9;
    acc = acc.call(p0, v7);
    v9 = acc;
    acc = p0;
    acc = acc["charCodeAt"];
    v7 = acc;
    acc = v10;
    v10 = acc;
    acc = ++acc;
    v11 = acc;
    acc = v7;
    acc = acc.call(p0, v10);
    v10 = acc;
    acc = p0;
    acc = acc["charCodeAt"];
    v12 = acc;
    acc = v11;
    v11 = acc;
    acc = ++acc;
    v7 = acc;
    acc = v12;
    acc = acc.call(p0, v11);
    v11 = acc;
    acc = v6;
    acc = v9 >> acc;
    v12 = acc;
    acc = v5;
    acc = v9 & acc;
    v9 = acc;
    acc = v4;
    acc = v9 << acc;
    v9 = acc;
    acc = v4;
    acc = v10 >> acc;
    acc = v9 | acc;
    v9 = acc;
    acc = v3;
    acc = v10 & acc;
    v13 = acc;
    acc = v6;
    acc = v13 << acc;
    v13 = acc;
    acc = v2;
    acc = v11 >> acc;
    acc = v13 | acc;
    v13 = acc;
    acc = v1;
    acc = v11 & acc;
    v14 = acc;
    acc = isNaN;
    acc = acc(v10);
    acc = !acc;
    if (acc) {
      acc = isNaN;
      acc = acc(v11);
      acc = !acc;
      if (!acc) {
        v10 = v13;
        v11 = v0;
      } else {
        v10 = v13;
        v11 = v14;
      }
    } else {
      v10 = v0;
      v11 = v0;
    }
    acc = this;
    acc = acc["characters"];
    v13 = acc;
    acc = acc["charAt"];
    acc = acc.call(v13, v12);
    acc = v8 + acc;
    v8 = acc;
    acc = this;
    acc = acc["characters"];
    v12 = acc;
    acc = acc["charAt"];
    acc = acc.call(v12, v9);
    acc = v8 + acc;
    v8 = acc;
    acc = this;
    acc = acc["characters"];
    v9 = acc;
    acc = acc["charAt"];
    acc = acc.call(v9, v10);
    acc = v8 + acc;
    v8 = acc;
    acc = this;
    acc = acc["characters"];
    v9 = acc;
    acc = acc["charAt"];
    acc = acc.call(v9, v11);
    acc = v8 + acc;
    v8 = acc;
  }
  acc = v8;
  return acc;
};
v1["encode"] = acc;
acc = function decode(p0) {
  let v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, acc;
  acc = 64;
  v0 = acc;
  acc = 6;
  v1 = acc;
  acc = 3;
  v2 = acc;
  acc = 15;
  v3 = acc;
  acc = 4;
  v4 = acc;
  acc = 2;
  v5 = acc;
  acc = 0;
  v6 = acc;
  acc = undefined;
  acc = "";
  v7 = acc;
  acc = p0;
  acc = acc["replace"];
  v8 = acc;
  acc = RegExp;
  v9 = acc;
  acc = "[^A-Za-z0-9\\+\\/\\=]";
  v10 = acc;
  acc = "g";
  v11 = acc;
  v16 = v9;
  v17 = v10;
  v18 = v11;
  acc = new v16(v17, v18);
  v9 = acc;
  acc = "";
  v10 = acc;
  acc = v8;
  acc = acc.call(p0, v9, v10);
  v8 = acc;
  while (true) {
    acc = v8;
    acc = acc["length"];
    acc = v6 < acc;
    if (!acc) break;
    acc = this;
    acc = acc["characters"];
    v9 = acc;
    acc = acc["indexOf"];
    v10 = acc;
    acc = v8;
    acc = acc["charAt"];
    v11 = acc;
    acc = v6;
    v6 = acc;
    acc = ++acc;
    v12 = acc;
    acc = v11;
    acc = acc.call(v8, v6);
    v6 = acc;
    acc = v10;
    acc = acc.call(v9, v6);
    v9 = acc;
    acc = this;
    acc = acc["characters"];
    v6 = acc;
    acc = acc["indexOf"];
    v10 = acc;
    acc = v8;
    acc = acc["charAt"];
    v11 = acc;
    acc = v12;
    v12 = acc;
    acc = ++acc;
    v13 = acc;
    acc = v11;
    acc = acc.call(v8, v12);
    v11 = acc;
    acc = v10;
    acc = acc.call(v6, v11);
    v10 = acc;
    acc = this;
    acc = acc["characters"];
    v6 = acc;
    acc = acc["indexOf"];
    v11 = acc;
    acc = v8;
    acc = acc["charAt"];
    v12 = acc;
    acc = v13;
    v13 = acc;
    acc = ++acc;
    v14 = acc;
    acc = v12;
    acc = acc.call(v8, v13);
    v12 = acc;
    acc = v11;
    acc = acc.call(v6, v12);
    v11 = acc;
    acc = this;
    acc = acc["characters"];
    v12 = acc;
    acc = acc["indexOf"];
    v13 = acc;
    acc = v8;
    acc = acc["charAt"];
    v15 = acc;
    acc = v14;
    v14 = acc;
    acc = ++acc;
    v6 = acc;
    acc = v15;
    acc = acc.call(v8, v14);
    v14 = acc;
    acc = v13;
    acc = acc.call(v12, v14);
    v12 = acc;
    acc = v5;
    acc = v9 << acc;
    v9 = acc;
    acc = v4;
    acc = v10 >> acc;
    acc = v9 | acc;
    v9 = acc;
    acc = v3;
    acc = v10 & acc;
    v10 = acc;
    acc = v4;
    acc = v10 << acc;
    v10 = acc;
    acc = v5;
    acc = v11 >> acc;
    acc = v10 | acc;
    v10 = acc;
    acc = v2;
    acc = v11 & acc;
    v13 = acc;
    acc = v1;
    acc = v13 << acc;
    v13 = acc;
    acc = v12;
    acc = v13 | acc;
    v13 = acc;
    acc = String;
    v14 = acc;
    acc = acc["fromCharCode"];
    acc = acc.call(v14, v9);
    acc = v7 + acc;
    v7 = acc;
    acc = v0;
    acc = v11 !== acc;
    if (acc) {
      acc = String;
      v9 = acc;
      acc = acc["fromCharCode"];
      acc = acc.call(v9, v10);
      acc = v7 + acc;
      v7 = acc;
    }
    acc = v0;
    acc = v12 !== acc;
    if (acc) {
      acc = String;
      v9 = acc;
      acc = acc["fromCharCode"];
      acc = acc.call(v9, v13);
      acc = v7 + acc;
      v7 = acc;
    }
  }
  acc = v7;
  return acc;
};
v1["decode"] = acc;
acc = v1;
v0["Base64"] = acc;
acc = globalThis["AES"];
v0 = acc;
acc = function () {
  let v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, acc;
  acc = 255;
  v0 = acc;
  acc = 8;
  v1 = acc;
  acc = 4;
  v2 = acc;
  acc = 0;
  v3 = acc;
  acc = 16;
  v4 = acc;
  acc = 1715592630;
  v5 = acc;
  let local0;
  acc = undefined;
  local0 = acc;
  acc = undefined;
  acc = Array;
  v6 = acc;
  v9 = v6;
  v10 = v4;
  acc = new v9(v10);
  this["arr"] = acc;
  acc = v3;
  local0 = acc;
  while (true) {
    acc = local0;
    v6 = acc;
    acc = v2;
    acc = v6 < acc;
    if (!acc) break;
    acc = this;
    acc = acc["arr"];
    v6 = acc;
    acc = local0;
    v7 = acc;
    acc = local0;
    v8 = acc;
    acc = v1;
    acc = v8 * acc;
    acc = v5 >>> acc;
    v8 = acc;
    acc = v0;
    acc = v8 & acc;
    v6[v7] = acc;
    acc = local0;
    acc = ++acc;
    local0 = acc;
  }
  acc = this;
  acc = acc["arr"];
  v0 = acc;
  acc = 123;
  v0[v2] = acc;
  acc = this;
  acc = acc["arr"];
  v0 = acc;
  acc = 5;
  v2 = acc;
  acc = 223;
  v0[v2] = acc;
  acc = this;
  acc = acc["arr"];
  v0 = acc;
  acc = 6;
  v2 = acc;
  acc = 13;
  v0[v2] = acc;
  acc = this;
  acc = acc["arr"];
  v0 = acc;
  acc = 7;
  v2 = acc;
  acc = 23;
  v0[v2] = acc;
  acc = v1;
  local0 = acc;
  while (true) {
    acc = local0;
    v0 = acc;
    acc = v4;
    acc = v0 < acc;
    if (!acc) break;
    acc = this;
    acc = acc["arr"];
    v0 = acc;
    acc = local0;
    v1 = acc;
    acc = v3;
    v0[v1] = acc;
    acc = local0;
    acc = ++acc;
    local0 = acc;
  }
  acc = function () {
    let v0, v1, v2, v3, v4, acc;
    acc = 0;
    v0 = acc;
    acc = 255;
    v1 = acc;
    acc = 8;
    v2 = acc;
    acc = 15;
    local0 = acc;
    while (true) {
      acc = local0;
      v3 = acc;
      acc = v2;
      acc = v3 >= acc;
      if (!acc) break;
      acc = this;
      acc = acc["arr"];
      v3 = acc;
      acc = local0;
      acc = v3[acc];
      v3 = acc;
      acc = v1;
      acc = v3 === acc;
      if (!acc) {
        acc = this;
        acc = acc["arr"];
        v0 = acc;
        acc = local0;
        v1 = acc;
        acc = v0[acc];
        acc = ++acc;
        v0[v1] = acc;
        break;
      }
      acc = this;
      acc = acc["arr"];
      v3 = acc;
      acc = local0;
      v4 = acc;
      acc = v0;
      v3[v4] = acc;
      acc = local0;
      acc = --acc;
      local0 = acc;
    }
    acc = this;
    return acc;
  };
  this["increment"] = acc;
  acc = console;
  v0 = acc;
  acc = acc["log"];
  acc = acc.call(v0);
  acc = undefined;
  return;
};
v0["Counter"] = acc;
acc = globalThis["AES"];
v0 = acc;
acc = function (p0) {
  let v0, v1, acc;
  let local0, local1;
  acc = undefined;
  local1 = acc;
  acc = undefined;
  local0 = acc;
  acc = 16;
  local1 = acc;
  acc = p0;
  this["key"] = acc;
  acc = globalThis["AES"];
  v0 = acc;
  acc = acc["keyExpansion"];
  acc = acc.call(v0, p0);
  this["keySchedule"] = acc;
  acc = globalThis["AES"];
  acc = acc["Counter"];
  v0 = acc;
  v1 = v0;
  acc = new v1();
  this["counter"] = acc;
  acc = function (p0) {
    let v0, v1, v2, acc;
    acc = 16;
    v0 = acc;
    acc = 0;
    local0 = acc;
    while (true) {
      acc = local0;
      v1 = acc;
      acc = v0;
      acc = v1 < acc;
      if (!acc) break;
      acc = this;
      acc = acc["counter"];
      acc = acc["arr"];
      v1 = acc;
      acc = local0;
      v2 = acc;
      acc = local0;
      acc = p0[acc];
      v1[v2] = acc;
      acc = local0;
      acc = ++acc;
      local0 = acc;
    }
    acc = this;
    return acc;
  };
  this["setCounter"] = acc;
  acc = function () {
    let acc;
    acc = this;
    acc = acc["counter"];
    acc = acc["arr"];
    return acc;
  };
  this["getCounter"] = acc;
  acc = function (p0) {
    let v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, acc;
    acc = 1;
    v0 = acc;
    acc = 0;
    v1 = acc;
    acc = undefined;
    acc = Math;
    v2 = acc;
    acc = acc["ceil"];
    v3 = acc;
    acc = p0;
    acc = acc["length"];
    v4 = acc;
    acc = local1;
    acc = v4 / acc;
    v4 = acc;
    acc = v3;
    acc = acc.call(v2, v4);
    v2 = acc;
    acc = Array;
    v3 = acc;
    acc = p0;
    acc = acc["length"];
    v4 = acc;
    v15 = v3;
    v16 = v4;
    acc = new v15(v16);
    v3 = acc;
    v4 = v1;
    while (true) {
      acc = v2;
      acc = v4 < acc;
      if (!acc) break;
      acc = globalThis["AES"];
      v5 = acc;
      acc = acc["cipher"];
      v6 = acc;
      acc = this;
      acc = acc["counter"];
      acc = acc["arr"];
      v7 = acc;
      acc = this;
      acc = acc["keySchedule"];
      v8 = acc;
      acc = v6;
      acc = acc.call(v5, v7, v8);
      v5 = acc;
      acc = v0;
      acc = v4 + acc;
      v6 = acc;
      acc = v2;
      acc = v6 === acc;
      if (acc) {
        acc = p0;
        acc = acc["length"];
        v6 = acc;
        acc = local1;
        acc = v6 % acc;
        v6 = acc;
      } else {
        acc = local1;
        v6 = acc;
      }
      acc = local1;
      acc = v4 * acc;
      v7 = acc;
      v8 = v1;
      while (true) {
        acc = v6;
        acc = v8 < acc;
        if (!acc) break;
        acc = v8;
        acc = v7 + acc;
        v9 = acc;
        acc = String;
        v10 = acc;
        acc = acc["fromCharCode"];
        v11 = acc;
        acc = v8;
        acc = v5[acc];
        v12 = acc;
        acc = p0;
        acc = acc["charCodeAt"];
        v13 = acc;
        acc = v8;
        acc = v7 + acc;
        v14 = acc;
        acc = v13;
        acc = acc.call(p0, v14);
        acc = v12 ^ acc;
        v12 = acc;
        acc = v11;
        acc = acc.call(v10, v12);
        v3[v9] = acc;
        acc = v8;
        acc = ++acc;
        v8 = acc;
      }
      acc = this;
      acc = acc["counter"];
      v5 = acc;
      acc = acc["increment"];
      acc = acc.call(v5);
      acc = v4;
      acc = ++acc;
      v4 = acc;
    }
    acc = v3;
    acc = acc["join"];
    v0 = acc;
    acc = "";
    v1 = acc;
    acc = v0;
    acc = acc.call(v3, v1);
    return acc;
  };
  this["run"] = acc;
  acc = function (p0) {
    let v0, v1, v2, acc;
    acc = globalThis["AES"];
    acc = acc["Base64"];
    v0 = acc;
    acc = acc["encode"];
    v1 = acc;
    acc = this;
    acc = acc["run"];
    acc = acc.call(this, p0);
    v2 = acc;
    acc = v1;
    acc = acc.call(v0, v2);
    return acc;
  };
  this["encrypt"] = acc;
  acc = function (p0) {
    let v0, v1, acc;
    acc = this;
    acc = acc["run"];
    v0 = acc;
    acc = globalThis["AES"];
    acc = acc["Base64"];
    v1 = acc;
    acc = acc["decode"];
    acc = acc.call(v1, p0);
    v1 = acc;
    acc = v0;
    acc = acc.call(this, v1);
    return acc;
  };
  this["decrypt"] = acc;
  acc = undefined;
  return;
};
v0["Crypto"] = acc;
acc = globalThis["AES"];
acc = acc["Crypto"];
v0 = acc;
acc = [190, 100, 76, 127, 43, 253, 149, 65, 72, 90, 40, 65, 6, 211, 77, 37];
v1 = acc;
v3 = v0;
v4 = v1;
acc = new v3(v4);
globalThis["aSide"] = acc;
acc = globalThis["AES"];
acc = acc["Crypto"];
v0 = acc;
acc = globalThis["aSide"];
acc = acc["key"];
v1 = acc;
v3 = v0;
v4 = v1;
acc = new v3(v4);
globalThis["bSide"] = acc;
acc = globalThis["bSide"];
v0 = acc;
acc = acc["setCounter"];
v1 = acc;
acc = globalThis["aSide"];
v2 = acc;
acc = acc["getCounter"];
acc = acc.call(v2);
v2 = acc;
acc = v1;
acc = acc.call(v0, v2);
acc = globalThis["aSide"];
v0 = acc;
acc = acc["encrypt"];
v1 = acc;
acc = "the quick brown fox jumped over the lazy dog";
v2 = acc;
acc = v1;
acc = acc.call(v0, v2);
globalThis["cipherText"] = acc;
acc = globalThis["bSide"];
v0 = acc;
acc = acc["decrypt"];
v1 = acc;
acc = globalThis["cipherText"];
v2 = acc;
acc = v1;
acc = acc.call(v0, v2);
globalThis["plainText"] = acc;
acc = console;
v0 = acc;
acc = acc["log"];
v1 = acc;
acc = globalThis["plainText"];
v2 = acc;
acc = "the quick brown fox jumped over the lazy dog";
acc = v2 === acc;
v2 = acc;
acc = v1;
acc = acc.call(v0, v2);
acc = undefined;